{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sri-spec.github.io/Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Summary statistics",
            "content": "Palmer Archipelago (Antarctica) penguin data. . Data Source: Dr. Kirtsten Gorman and Palmer Station, Antartica, LTER. . Problem Statement: We compare different physical aspects of Penguins like, body mass, flipper length, culmen length, culmen depth to predict the species of the Penguin. . . import numpy as np import pandas as pd from sklearn import tree import graphviz . from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor import seaborn as sns . from google.colab import files uploaded = files.upload() . Upload widget is only available when the cell has been executed in the current browser session. Please rerun this cell to enable. Saving penguins.csv to penguins.csv . df = pd.read_csv(&quot;penguins.csv&quot;) . df . species island Region culmen_length_mm culmen_depth_mm flipper_length_mm body_mass_g sex Delta 15 N (o/oo) Delta 13 C (o/oo) Clutch Completion Date Egg . 0 Adelie | Torgersen | Anvers | 39.1 | 18.7 | 181.0 | 3750.0 | MALE | NaN | NaN | Yes | 11/11/2007 | . 1 Adelie | Torgersen | Anvers | 39.5 | 17.4 | 186.0 | 3800.0 | FEMALE | 8.94956 | -24.69454 | Yes | 11/11/2007 | . 2 Adelie | Torgersen | Anvers | 40.3 | 18.0 | 195.0 | 3250.0 | FEMALE | 8.36821 | -25.33302 | Yes | 11/16/2007 | . 3 Adelie | Torgersen | Anvers | NaN | NaN | NaN | NaN | NaN | NaN | NaN | Yes | 11/16/2007 | . 4 Adelie | Torgersen | Anvers | 36.7 | 19.3 | 193.0 | 3450.0 | FEMALE | 8.76651 | -25.32426 | Yes | 11/16/2007 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 339 Gentoo | Biscoe | Anvers | NaN | NaN | NaN | NaN | NaN | NaN | NaN | No | 12/1/2009 | . 340 Gentoo | Biscoe | Anvers | 46.8 | 14.3 | 215.0 | 4850.0 | FEMALE | 8.41151 | -26.13832 | Yes | 11/22/2009 | . 341 Gentoo | Biscoe | Anvers | 50.4 | 15.7 | 222.0 | 5750.0 | MALE | 8.30166 | -26.04117 | Yes | 11/22/2009 | . 342 Gentoo | Biscoe | Anvers | 45.2 | 14.8 | 212.0 | 5200.0 | FEMALE | 8.24246 | -26.11969 | Yes | 11/22/2009 | . 343 Gentoo | Biscoe | Anvers | 49.9 | 16.1 | 213.0 | 5400.0 | MALE | 8.36390 | -26.15531 | Yes | 11/22/2009 | . 344 rows × 12 columns . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 344 entries, 0 to 343 Data columns (total 12 columns): # Column Non-Null Count Dtype -- -- 0 species 344 non-null object 1 island 344 non-null object 2 Region 344 non-null object 3 culmen_length_mm 342 non-null float64 4 culmen_depth_mm 342 non-null float64 5 flipper_length_mm 342 non-null float64 6 body_mass_g 342 non-null float64 7 sex 334 non-null object 8 Delta 15 N (o/oo) 330 non-null float64 9 Delta 13 C (o/oo) 331 non-null float64 10 Clutch Completion 344 non-null object 11 Date Egg 344 non-null object dtypes: float64(6), object(6) memory usage: 32.4+ KB . df.shape . (344, 12) . df.dtypes . species object island object Region object culmen_length_mm float64 culmen_depth_mm float64 flipper_length_mm float64 body_mass_g float64 sex object Delta 15 N (o/oo) float64 Delta 13 C (o/oo) float64 Clutch Completion object Date Egg object dtype: object . missing_values = [&quot;NA&quot;, &quot;NAN&quot;, &quot;n/a&quot;, &quot;na&quot;, &quot;Empty&quot;, &quot;--&quot;] . df = pd.read_csv(&quot;penguins.csv&quot;, na_values = missing_values) . df.isnull().any() # shows which column missing values are exactly found. There are 7 columns with null values . species False island False Region False culmen_length_mm True culmen_depth_mm True flipper_length_mm True body_mass_g True sex True Delta 15 N (o/oo) True Delta 13 C (o/oo) True Clutch Completion False Date Egg False dtype: bool . df.fillna(df.mean(), inplace=True) . df.isnull().any() . species False island False Region False culmen_length_mm False culmen_depth_mm False flipper_length_mm False body_mass_g False sex True Delta 15 N (o/oo) False Delta 13 C (o/oo) False Clutch Completion False Date Egg False dtype: bool . def binarize_sex(val): if val == &#39;Male&#39;: return 1 else: return 0 . df[&#39;sex&#39;] = df[&#39;sex&#39;].apply(binarize_sex) . df.dropna(inplace=True) . df.isnull().any() . species False island False Region False culmen_length_mm False culmen_depth_mm False flipper_length_mm False body_mass_g False sex False Delta 15 N (o/oo) False Delta 13 C (o/oo) False Clutch Completion False Date Egg False dtype: bool . df.isna().sum() . species 0 island 0 Region 0 culmen_length_mm 0 culmen_depth_mm 0 flipper_length_mm 0 body_mass_g 0 sex 0 Delta 15 N (o/oo) 0 Delta 13 C (o/oo) 0 Clutch Completion 0 Date Egg 0 dtype: int64 . import matplotlib.pyplot as plt import seaborn as sns df=df.dropna() sns.heatmap(df.isna()) plt.show() . df.describe() . culmen_length_mm culmen_depth_mm flipper_length_mm body_mass_g sex Delta 15 N (o/oo) Delta 13 C (o/oo) . count 344.000000 | 344.000000 | 344.000000 | 344.000000 | 344.0 | 344.000000 | 344.000000 | . mean 43.921930 | 17.151170 | 200.915205 | 4201.754386 | 0.0 | 8.733382 | -25.686292 | . std 5.443643 | 1.969027 | 14.020657 | 799.613058 | 0.0 | 0.540392 | 0.778770 | . min 32.100000 | 13.100000 | 172.000000 | 2700.000000 | 0.0 | 7.632200 | -27.018540 | . 25% 39.275000 | 15.600000 | 190.000000 | 3550.000000 | 0.0 | 8.307415 | -26.285460 | . 50% 44.250000 | 17.300000 | 197.000000 | 4050.000000 | 0.0 | 8.687455 | -25.793660 | . 75% 48.500000 | 18.700000 | 213.000000 | 4750.000000 | 0.0 | 9.136170 | -25.089467 | . max 59.600000 | 21.500000 | 231.000000 | 6300.000000 | 0.0 | 10.025440 | -23.787670 | . Describe the column names: . df.columns # Delta 15 N is a number denoting the measure of the ratio of stable isotopes 15N . Index([&#39;species&#39;, &#39;island&#39;, &#39;Region&#39;, &#39;culmen_length_mm&#39;, &#39;culmen_depth_mm&#39;, &#39;flipper_length_mm&#39;, &#39;body_mass_g&#39;, &#39;sex&#39;, &#39;Delta 15 N (o/oo)&#39;, &#39;Delta 13 C (o/oo)&#39;, &#39;Clutch Completion&#39;, &#39;Date Egg&#39;], dtype=&#39;object&#39;) . df[&#39;culmen_depth_mm&#39;].mean() . 17.151169590643274 . df[&#39;culmen_depth_mm&#39;].mean() . 17.151169590643274 . df[&#39;culmen_length_mm&#39;].mean() . 43.92192982456141 . df[&#39;body_mass_g&#39;].median() . 4050.0 . df[&#39;species&#39;].count() . 344 . df.head() . species island Region culmen_length_mm culmen_depth_mm flipper_length_mm body_mass_g sex Delta 15 N (o/oo) Delta 13 C (o/oo) Clutch Completion Date Egg . 0 Adelie | Torgersen | Anvers | 39.10000 | 18.70000 | 181.000000 | 3750.000000 | 0 | 8.733382 | -25.686292 | Yes | 11/11/2007 | . 1 Adelie | Torgersen | Anvers | 39.50000 | 17.40000 | 186.000000 | 3800.000000 | 0 | 8.949560 | -24.694540 | Yes | 11/11/2007 | . 2 Adelie | Torgersen | Anvers | 40.30000 | 18.00000 | 195.000000 | 3250.000000 | 0 | 8.368210 | -25.333020 | Yes | 11/16/2007 | . 3 Adelie | Torgersen | Anvers | 43.92193 | 17.15117 | 200.915205 | 4201.754386 | 0 | 8.733382 | -25.686292 | Yes | 11/16/2007 | . 4 Adelie | Torgersen | Anvers | 36.70000 | 19.30000 | 193.000000 | 3450.000000 | 0 | 8.766510 | -25.324260 | Yes | 11/16/2007 | . Data Visualization . Penguins &amp; their distribtution in Antartica . import matplotlib.pyplot as plt . plt.pie(df[&quot;species&quot;].value_counts(),labels = df[&quot;species&quot;].unique()) plt.show() . p = sns.load_dataset(&#39;penguins&#39;) . c = p.groupby(&#39;species&#39;)[&#39;species&#39;].count() . c . species Adelie 152 Chinstrap 68 Gentoo 124 Name: species, dtype: int64 . sns.countplot(&#39;species&#39;,data=p, palette=(&#39;DarkOrange&#39;, &#39;MediumOrchid&#39;, &#39;Teal&#39;)) plt.show() . /usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . sns.countplot(x = &quot;island&quot;, data = p) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff40e6a4250&gt; . sns.barplot(x = &quot;island&quot;, y = &quot;body_mass_g&quot;, data = p) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff418c57a90&gt; . sns.pairplot(data = p, hue=&#39;species&#39;, palette=None) . &lt;seaborn.axisgrid.PairGrid at 0x7ff40e6b7dd0&gt; . sns.scatterplot(x = p.bill_length_mm, y = p.bill_depth_mm, hue = p.species, palette=None) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff40dfcf390&gt; . sns.scatterplot(x = p.body_mass_g, y = p.flipper_length_mm, hue = p.species, palette=None) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff40dfada50&gt; . sns.heatmap(df.corr()) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff40c6c4e10&gt; . Data Partition . X_train.dtypes . species object island object Region object culmen_length_mm float64 sex int64 Delta 15 N (o/oo) float64 Delta 13 C (o/oo) float64 Clutch Completion object Date Egg object dtype: object . from sklearn.datasets import make_blobs from sklearn.model_selection import train_test_split # create dataset X, y = make_blobs(n_samples=1000) # split into train test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33) print(X_train.shape, X_test.shape, y_train.shape, y_test.shape) . (670, 2) (330, 2) (670,) (330,) . parameters = [&#39;culmen_length_mm&#39;, &#39;culmen_depth_mm&#39;, &#39;flipper_length_mm&#39;, &#39;body_mass_g&#39;, &#39;sex&#39;, &#39;Delta 15 N (o/oo)&#39;, &#39;Delta 13 C (o/oo)&#39;] result = &quot;species&quot; . model = DecisionTreeClassifier(max_depth=5) model.fit(df[parameters], df[result]) . DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion=&#39;gini&#39;, max_depth=5, max_features=None, max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, presort=&#39;deprecated&#39;, random_state=None, splitter=&#39;best&#39;) . model.score(df[parameters], df[result]) . 0.997093023255814 . dot_data = tree.export_graphviz(model, feature_names=parameters, filled=True, rounded=True) graph = graphviz.Source(dot_data) graph . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Tree 0 flipper_length_mm &lt;= 206.5 gini = 0.636 samples = 344 value = [152, 68, 124] 1 culmen_length_mm &lt;= 44.65 gini = 0.427 samples = 215 value = [150, 63, 2] 0&#45;&gt;1 True 18 culmen_depth_mm &lt;= 17.65 gini = 0.104 samples = 129 value = [2, 5, 122] 0&#45;&gt;18 False 2 Delta 13 C (o/oo) &lt;= &#45;25.015 gini = 0.087 samples = 154 value = [147, 6, 1] 1&#45;&gt;2 11 Delta 13 C (o/oo) &lt;= &#45;25.643 gini = 0.124 samples = 61 value = [3, 57, 1] 1&#45;&gt;11 3 culmen_length_mm &lt;= 43.561 gini = 0.014 samples = 140 value = [139, 0, 1] 2&#45;&gt;3 6 culmen_length_mm &lt;= 40.25 gini = 0.49 samples = 14 value = [8, 6, 0] 2&#45;&gt;6 4 gini = 0.0 samples = 138 value = [138, 0, 0] 3&#45;&gt;4 5 gini = 0.5 samples = 2 value = [1, 0, 1] 3&#45;&gt;5 7 gini = 0.0 samples = 7 value = [7, 0, 0] 6&#45;&gt;7 8 body_mass_g &lt;= 4000.0 gini = 0.245 samples = 7 value = [1, 6, 0] 6&#45;&gt;8 9 gini = 0.0 samples = 6 value = [0, 6, 0] 8&#45;&gt;9 10 gini = 0.0 samples = 1 value = [1, 0, 0] 8&#45;&gt;10 12 culmen_length_mm &lt;= 47.1 gini = 0.444 samples = 3 value = [2, 0, 1] 11&#45;&gt;12 15 culmen_depth_mm &lt;= 21.15 gini = 0.034 samples = 58 value = [1, 57, 0] 11&#45;&gt;15 13 gini = 0.0 samples = 2 value = [2, 0, 0] 12&#45;&gt;13 14 gini = 0.0 samples = 1 value = [0, 0, 1] 12&#45;&gt;14 16 gini = 0.0 samples = 57 value = [0, 57, 0] 15&#45;&gt;16 17 gini = 0.0 samples = 1 value = [1, 0, 0] 15&#45;&gt;17 19 gini = 0.0 samples = 122 value = [0, 0, 122] 18&#45;&gt;19 20 culmen_length_mm &lt;= 46.55 gini = 0.408 samples = 7 value = [2, 5, 0] 18&#45;&gt;20 21 gini = 0.0 samples = 2 value = [2, 0, 0] 20&#45;&gt;21 22 gini = 0.0 samples = 5 value = [0, 5, 0] 20&#45;&gt;22 list(zip(parameters, model.feature_importances_)) . [(&#39;culmen_length_mm&#39;, 0.37287254604043296), (&#39;culmen_depth_mm&#39;, 0.05743618187396302), (&#39;flipper_length_mm&#39;, 0.5210554427945732), (&#39;body_mass_g&#39;, 0.007874616570268746), (&#39;sex&#39;, 0.0), (&#39;Delta 15 N (o/oo)&#39;, 0.0), (&#39;Delta 13 C (o/oo)&#39;, 0.04076121272076198)] . Questions for further analysis . Role the isotope Delta N plays in the Penguin Population size? . | Clutch completion does it always result in increase in population numbers? . |",
            "url": "https://sri-spec.github.io/Blog/2020/01/28/My-First-Post.html",
            "relUrl": "/2020/01/28/My-First-Post.html",
            "date": " • Jan 28, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sri-spec.github.io/Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Srividhya Ammanur is a data science enthusiastData Science For All 1. . An educational blog on Doing Data Science for fun. &#8617; . |",
          "url": "https://sri-spec.github.io/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sri-spec.github.io/Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}